/*
 * Copyright (C) 2017.  Iusworks, Inc - All Rights Reserved
 *
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 *
 * Jaguar com.iusworks.jaguar.thrift.Notification
 *
 * cluries <cluries@me.com>,  September 2017
 *
 * LastModified: 9/22/17 4:19 PM
 *
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.iusworks.jaguar.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-22")
public class Notification implements org.apache.thrift.TBase<Notification, Notification._Fields>, java.io.Serializable, Cloneable, Comparable<Notification> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Notification");

  private static final org.apache.thrift.protocol.TField ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("env", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField SOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("sound", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ALERT_FIELD_DESC = new org.apache.thrift.protocol.TField("alert", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField STORAGED_FIELD_DESC = new org.apache.thrift.protocol.TField("storaged", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField BADGE_FIELD_DESC = new org.apache.thrift.protocol.TField("badge", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField EVENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("eventTime", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NotificationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NotificationTupleSchemeFactory();

  /**
   * 
   * @see Environment
   */
  public Environment env; // required
  public String uid; // optional
  public java.util.Set<String> tags; // optional
  public String sound; // required
  public String title; // optional
  public String alert; // required
  public String category; // optional
  public String action; // optional
  public java.util.Map<String,String> ext; // optional
  public String storaged; // optional
  public int badge; // optional
  public int eventTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see Environment
     */
    ENV((short)1, "env"),
    UID((short)2, "uid"),
    TAGS((short)3, "tags"),
    SOUND((short)4, "sound"),
    TITLE((short)5, "title"),
    ALERT((short)6, "alert"),
    CATEGORY((short)7, "category"),
    ACTION((short)8, "action"),
    EXT((short)9, "ext"),
    STORAGED((short)10, "storaged"),
    BADGE((short)11, "badge"),
    EVENT_TIME((short)12, "eventTime");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENV
          return ENV;
        case 2: // UID
          return UID;
        case 3: // TAGS
          return TAGS;
        case 4: // SOUND
          return SOUND;
        case 5: // TITLE
          return TITLE;
        case 6: // ALERT
          return ALERT;
        case 7: // CATEGORY
          return CATEGORY;
        case 8: // ACTION
          return ACTION;
        case 9: // EXT
          return EXT;
        case 10: // STORAGED
          return STORAGED;
        case 11: // BADGE
          return BADGE;
        case 12: // EVENT_TIME
          return EVENT_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BADGE_ISSET_ID = 0;
  private static final int __EVENTTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.UID,_Fields.TAGS,_Fields.TITLE,_Fields.CATEGORY,_Fields.ACTION,_Fields.EXT,_Fields.STORAGED,_Fields.BADGE,_Fields.EVENT_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENV, new org.apache.thrift.meta_data.FieldMetaData("env", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Environment.class)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SOUND, new org.apache.thrift.meta_data.FieldMetaData("sound", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALERT, new org.apache.thrift.meta_data.FieldMetaData("alert", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STORAGED, new org.apache.thrift.meta_data.FieldMetaData("storaged", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BADGE, new org.apache.thrift.meta_data.FieldMetaData("badge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EVENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("eventTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Notification.class, metaDataMap);
  }

  public Notification() {
  }

  public Notification(
    Environment env,
    String sound,
    String alert)
  {
    this();
    this.env = env;
    this.sound = sound;
    this.alert = alert;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Notification(Notification other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetEnv()) {
      this.env = other.env;
    }
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetTags()) {
      java.util.Set<String> __this__tags = new java.util.HashSet<String>(other.tags);
      this.tags = __this__tags;
    }
    if (other.isSetSound()) {
      this.sound = other.sound;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetAlert()) {
      this.alert = other.alert;
    }
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetAction()) {
      this.action = other.action;
    }
    if (other.isSetExt()) {
      java.util.Map<String,String> __this__ext = new java.util.HashMap<String,String>(other.ext);
      this.ext = __this__ext;
    }
    if (other.isSetStoraged()) {
      this.storaged = other.storaged;
    }
    this.badge = other.badge;
    this.eventTime = other.eventTime;
  }

  public Notification deepCopy() {
    return new Notification(this);
  }

  @Override
  public void clear() {
    this.env = null;
    this.uid = null;
    this.tags = null;
    this.sound = null;
    this.title = null;
    this.alert = null;
    this.category = null;
    this.action = null;
    this.ext = null;
    this.storaged = null;
    setBadgeIsSet(false);
    this.badge = 0;
    setEventTimeIsSet(false);
    this.eventTime = 0;
  }

  /**
   * 
   * @see Environment
   */
  public Environment getEnv() {
    return this.env;
  }

  /**
   * 
   * @see Environment
   */
  public Notification setEnv(Environment env) {
    this.env = env;
    return this;
  }

  public void unsetEnv() {
    this.env = null;
  }

  /** Returns true if field env is set (has been assigned a value) and false otherwise */
  public boolean isSetEnv() {
    return this.env != null;
  }

  public void setEnvIsSet(boolean value) {
    if (!value) {
      this.env = null;
    }
  }

  public String getUid() {
    return this.uid;
  }

  public Notification setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<String> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(String elem) {
    if (this.tags == null) {
      this.tags = new java.util.HashSet<String>();
    }
    this.tags.add(elem);
  }

  public java.util.Set<String> getTags() {
    return this.tags;
  }

  public Notification setTags(java.util.Set<String> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public String getSound() {
    return this.sound;
  }

  public Notification setSound(String sound) {
    this.sound = sound;
    return this;
  }

  public void unsetSound() {
    this.sound = null;
  }

  /** Returns true if field sound is set (has been assigned a value) and false otherwise */
  public boolean isSetSound() {
    return this.sound != null;
  }

  public void setSoundIsSet(boolean value) {
    if (!value) {
      this.sound = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public Notification setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getAlert() {
    return this.alert;
  }

  public Notification setAlert(String alert) {
    this.alert = alert;
    return this;
  }

  public void unsetAlert() {
    this.alert = null;
  }

  /** Returns true if field alert is set (has been assigned a value) and false otherwise */
  public boolean isSetAlert() {
    return this.alert != null;
  }

  public void setAlertIsSet(boolean value) {
    if (!value) {
      this.alert = null;
    }
  }

  public String getCategory() {
    return this.category;
  }

  public Notification setCategory(String category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public String getAction() {
    return this.action;
  }

  public Notification setAction(String action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    this.action = null;
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  public int getExtSize() {
    return (this.ext == null) ? 0 : this.ext.size();
  }

  public void putToExt(String key, String val) {
    if (this.ext == null) {
      this.ext = new java.util.HashMap<String,String>();
    }
    this.ext.put(key, val);
  }

  public java.util.Map<String,String> getExt() {
    return this.ext;
  }

  public Notification setExt(java.util.Map<String,String> ext) {
    this.ext = ext;
    return this;
  }

  public void unsetExt() {
    this.ext = null;
  }

  /** Returns true if field ext is set (has been assigned a value) and false otherwise */
  public boolean isSetExt() {
    return this.ext != null;
  }

  public void setExtIsSet(boolean value) {
    if (!value) {
      this.ext = null;
    }
  }

  public String getStoraged() {
    return this.storaged;
  }

  public Notification setStoraged(String storaged) {
    this.storaged = storaged;
    return this;
  }

  public void unsetStoraged() {
    this.storaged = null;
  }

  /** Returns true if field storaged is set (has been assigned a value) and false otherwise */
  public boolean isSetStoraged() {
    return this.storaged != null;
  }

  public void setStoragedIsSet(boolean value) {
    if (!value) {
      this.storaged = null;
    }
  }

  public int getBadge() {
    return this.badge;
  }

  public Notification setBadge(int badge) {
    this.badge = badge;
    setBadgeIsSet(true);
    return this;
  }

  public void unsetBadge() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BADGE_ISSET_ID);
  }

  /** Returns true if field badge is set (has been assigned a value) and false otherwise */
  public boolean isSetBadge() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BADGE_ISSET_ID);
  }

  public void setBadgeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BADGE_ISSET_ID, value);
  }

  public int getEventTime() {
    return this.eventTime;
  }

  public Notification setEventTime(int eventTime) {
    this.eventTime = eventTime;
    setEventTimeIsSet(true);
    return this;
  }

  public void unsetEventTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EVENTTIME_ISSET_ID);
  }

  /** Returns true if field eventTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEventTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EVENTTIME_ISSET_ID);
  }

  public void setEventTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EVENTTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ENV:
      if (value == null) {
        unsetEnv();
      } else {
        setEnv((Environment)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((java.util.Set<String>)value);
      }
      break;

    case SOUND:
      if (value == null) {
        unsetSound();
      } else {
        setSound((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case ALERT:
      if (value == null) {
        unsetAlert();
      } else {
        setAlert((String)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((String)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((String)value);
      }
      break;

    case EXT:
      if (value == null) {
        unsetExt();
      } else {
        setExt((java.util.Map<String,String>)value);
      }
      break;

    case STORAGED:
      if (value == null) {
        unsetStoraged();
      } else {
        setStoraged((String)value);
      }
      break;

    case BADGE:
      if (value == null) {
        unsetBadge();
      } else {
        setBadge((Integer)value);
      }
      break;

    case EVENT_TIME:
      if (value == null) {
        unsetEventTime();
      } else {
        setEventTime((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ENV:
      return getEnv();

    case UID:
      return getUid();

    case TAGS:
      return getTags();

    case SOUND:
      return getSound();

    case TITLE:
      return getTitle();

    case ALERT:
      return getAlert();

    case CATEGORY:
      return getCategory();

    case ACTION:
      return getAction();

    case EXT:
      return getExt();

    case STORAGED:
      return getStoraged();

    case BADGE:
      return getBadge();

    case EVENT_TIME:
      return getEventTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ENV:
      return isSetEnv();
    case UID:
      return isSetUid();
    case TAGS:
      return isSetTags();
    case SOUND:
      return isSetSound();
    case TITLE:
      return isSetTitle();
    case ALERT:
      return isSetAlert();
    case CATEGORY:
      return isSetCategory();
    case ACTION:
      return isSetAction();
    case EXT:
      return isSetExt();
    case STORAGED:
      return isSetStoraged();
    case BADGE:
      return isSetBadge();
    case EVENT_TIME:
      return isSetEventTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Notification)
      return this.equals((Notification)that);
    return false;
  }

  public boolean equals(Notification that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_env = true && this.isSetEnv();
    boolean that_present_env = true && that.isSetEnv();
    if (this_present_env || that_present_env) {
      if (!(this_present_env && that_present_env))
        return false;
      if (!this.env.equals(that.env))
        return false;
    }

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_sound = true && this.isSetSound();
    boolean that_present_sound = true && that.isSetSound();
    if (this_present_sound || that_present_sound) {
      if (!(this_present_sound && that_present_sound))
        return false;
      if (!this.sound.equals(that.sound))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_alert = true && this.isSetAlert();
    boolean that_present_alert = true && that.isSetAlert();
    if (this_present_alert || that_present_alert) {
      if (!(this_present_alert && that_present_alert))
        return false;
      if (!this.alert.equals(that.alert))
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!this.action.equals(that.action))
        return false;
    }

    boolean this_present_ext = true && this.isSetExt();
    boolean that_present_ext = true && that.isSetExt();
    if (this_present_ext || that_present_ext) {
      if (!(this_present_ext && that_present_ext))
        return false;
      if (!this.ext.equals(that.ext))
        return false;
    }

    boolean this_present_storaged = true && this.isSetStoraged();
    boolean that_present_storaged = true && that.isSetStoraged();
    if (this_present_storaged || that_present_storaged) {
      if (!(this_present_storaged && that_present_storaged))
        return false;
      if (!this.storaged.equals(that.storaged))
        return false;
    }

    boolean this_present_badge = true && this.isSetBadge();
    boolean that_present_badge = true && that.isSetBadge();
    if (this_present_badge || that_present_badge) {
      if (!(this_present_badge && that_present_badge))
        return false;
      if (this.badge != that.badge)
        return false;
    }

    boolean this_present_eventTime = true && this.isSetEventTime();
    boolean that_present_eventTime = true && that.isSetEventTime();
    if (this_present_eventTime || that_present_eventTime) {
      if (!(this_present_eventTime && that_present_eventTime))
        return false;
      if (this.eventTime != that.eventTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetEnv()) ? 131071 : 524287);
    if (isSetEnv())
      hashCode = hashCode * 8191 + env.getValue();

    hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
    if (isSetUid())
      hashCode = hashCode * 8191 + uid.hashCode();

    hashCode = hashCode * 8191 + ((isSetTags()) ? 131071 : 524287);
    if (isSetTags())
      hashCode = hashCode * 8191 + tags.hashCode();

    hashCode = hashCode * 8191 + ((isSetSound()) ? 131071 : 524287);
    if (isSetSound())
      hashCode = hashCode * 8191 + sound.hashCode();

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetAlert()) ? 131071 : 524287);
    if (isSetAlert())
      hashCode = hashCode * 8191 + alert.hashCode();

    hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
    if (isSetCategory())
      hashCode = hashCode * 8191 + category.hashCode();

    hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
    if (isSetAction())
      hashCode = hashCode * 8191 + action.hashCode();

    hashCode = hashCode * 8191 + ((isSetExt()) ? 131071 : 524287);
    if (isSetExt())
      hashCode = hashCode * 8191 + ext.hashCode();

    hashCode = hashCode * 8191 + ((isSetStoraged()) ? 131071 : 524287);
    if (isSetStoraged())
      hashCode = hashCode * 8191 + storaged.hashCode();

    hashCode = hashCode * 8191 + ((isSetBadge()) ? 131071 : 524287);
    if (isSetBadge())
      hashCode = hashCode * 8191 + badge;

    hashCode = hashCode * 8191 + ((isSetEventTime()) ? 131071 : 524287);
    if (isSetEventTime())
      hashCode = hashCode * 8191 + eventTime;

    return hashCode;
  }

  @Override
  public int compareTo(Notification other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEnv()).compareTo(other.isSetEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.env, other.env);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSound()).compareTo(other.isSetSound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sound, other.sound);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlert()).compareTo(other.isSetAlert());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlert()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alert, other.alert);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStoraged()).compareTo(other.isSetStoraged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoraged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storaged, other.storaged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBadge()).compareTo(other.isSetBadge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBadge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badge, other.badge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventTime()).compareTo(other.isSetEventTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventTime, other.eventTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Notification(");
    boolean first = true;

    sb.append("env:");
    if (this.env == null) {
      sb.append("null");
    } else {
      sb.append(this.env);
    }
    first = false;
    if (isSetUid()) {
      if (!first) sb.append(", ");
      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("sound:");
    if (this.sound == null) {
      sb.append("null");
    } else {
      sb.append(this.sound);
    }
    first = false;
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("alert:");
    if (this.alert == null) {
      sb.append("null");
    } else {
      sb.append(this.alert);
    }
    first = false;
    if (isSetCategory()) {
      if (!first) sb.append(", ");
      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
    }
    if (isSetAction()) {
      if (!first) sb.append(", ");
      sb.append("action:");
      if (this.action == null) {
        sb.append("null");
      } else {
        sb.append(this.action);
      }
      first = false;
    }
    if (isSetExt()) {
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
    }
    if (isSetStoraged()) {
      if (!first) sb.append(", ");
      sb.append("storaged:");
      if (this.storaged == null) {
        sb.append("null");
      } else {
        sb.append(this.storaged);
      }
      first = false;
    }
    if (isSetBadge()) {
      if (!first) sb.append(", ");
      sb.append("badge:");
      sb.append(this.badge);
      first = false;
    }
    if (isSetEventTime()) {
      if (!first) sb.append(", ");
      sb.append("eventTime:");
      sb.append(this.eventTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (env == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'env' was not present! Struct: " + toString());
    }
    if (sound == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sound' was not present! Struct: " + toString());
    }
    if (alert == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'alert' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NotificationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NotificationStandardScheme getScheme() {
      return new NotificationStandardScheme();
    }
  }

  private static class NotificationStandardScheme extends org.apache.thrift.scheme.StandardScheme<Notification> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Notification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.env = Environment.findByValue(iprot.readI32());
              struct.setEnvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set34 = iprot.readSetBegin();
                struct.tags = new java.util.HashSet<String>(2*_set34.size);
                String _elem35;
                for (int _i36 = 0; _i36 < _set34.size; ++_i36)
                {
                  _elem35 = iprot.readString();
                  struct.tags.add(_elem35);
                }
                iprot.readSetEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SOUND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sound = iprot.readString();
              struct.setSoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ALERT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alert = iprot.readString();
              struct.setAlertIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.category = iprot.readString();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.action = iprot.readString();
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map37 = iprot.readMapBegin();
                struct.ext = new java.util.HashMap<String,String>(2*_map37.size);
                String _key38;
                String _val39;
                for (int _i40 = 0; _i40 < _map37.size; ++_i40)
                {
                  _key38 = iprot.readString();
                  _val39 = iprot.readString();
                  struct.ext.put(_key38, _val39);
                }
                iprot.readMapEnd();
              }
              struct.setExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STORAGED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.storaged = iprot.readString();
              struct.setStoragedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BADGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.badge = iprot.readI32();
              struct.setBadgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EVENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eventTime = iprot.readI32();
              struct.setEventTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Notification struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.env != null) {
        oprot.writeFieldBegin(ENV_FIELD_DESC);
        oprot.writeI32(struct.env.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.uid != null) {
        if (struct.isSetUid()) {
          oprot.writeFieldBegin(UID_FIELD_DESC);
          oprot.writeString(struct.uid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
            for (String _iter41 : struct.tags)
            {
              oprot.writeString(_iter41);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sound != null) {
        oprot.writeFieldBegin(SOUND_FIELD_DESC);
        oprot.writeString(struct.sound);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.alert != null) {
        oprot.writeFieldBegin(ALERT_FIELD_DESC);
        oprot.writeString(struct.alert);
        oprot.writeFieldEnd();
      }
      if (struct.category != null) {
        if (struct.isSetCategory()) {
          oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
          oprot.writeString(struct.category);
          oprot.writeFieldEnd();
        }
      }
      if (struct.action != null) {
        if (struct.isSetAction()) {
          oprot.writeFieldBegin(ACTION_FIELD_DESC);
          oprot.writeString(struct.action);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ext != null) {
        if (struct.isSetExt()) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.ext.size()));
            for (java.util.Map.Entry<String, String> _iter42 : struct.ext.entrySet())
            {
              oprot.writeString(_iter42.getKey());
              oprot.writeString(_iter42.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.storaged != null) {
        if (struct.isSetStoraged()) {
          oprot.writeFieldBegin(STORAGED_FIELD_DESC);
          oprot.writeString(struct.storaged);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBadge()) {
        oprot.writeFieldBegin(BADGE_FIELD_DESC);
        oprot.writeI32(struct.badge);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEventTime()) {
        oprot.writeFieldBegin(EVENT_TIME_FIELD_DESC);
        oprot.writeI32(struct.eventTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NotificationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NotificationTupleScheme getScheme() {
      return new NotificationTupleScheme();
    }
  }

  private static class NotificationTupleScheme extends org.apache.thrift.scheme.TupleScheme<Notification> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Notification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.env.getValue());
      oprot.writeString(struct.sound);
      oprot.writeString(struct.alert);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUid()) {
        optionals.set(0);
      }
      if (struct.isSetTags()) {
        optionals.set(1);
      }
      if (struct.isSetTitle()) {
        optionals.set(2);
      }
      if (struct.isSetCategory()) {
        optionals.set(3);
      }
      if (struct.isSetAction()) {
        optionals.set(4);
      }
      if (struct.isSetExt()) {
        optionals.set(5);
      }
      if (struct.isSetStoraged()) {
        optionals.set(6);
      }
      if (struct.isSetBadge()) {
        optionals.set(7);
      }
      if (struct.isSetEventTime()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetUid()) {
        oprot.writeString(struct.uid);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (String _iter43 : struct.tags)
          {
            oprot.writeString(_iter43);
          }
        }
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetCategory()) {
        oprot.writeString(struct.category);
      }
      if (struct.isSetAction()) {
        oprot.writeString(struct.action);
      }
      if (struct.isSetExt()) {
        {
          oprot.writeI32(struct.ext.size());
          for (java.util.Map.Entry<String, String> _iter44 : struct.ext.entrySet())
          {
            oprot.writeString(_iter44.getKey());
            oprot.writeString(_iter44.getValue());
          }
        }
      }
      if (struct.isSetStoraged()) {
        oprot.writeString(struct.storaged);
      }
      if (struct.isSetBadge()) {
        oprot.writeI32(struct.badge);
      }
      if (struct.isSetEventTime()) {
        oprot.writeI32(struct.eventTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Notification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.env = Environment.findByValue(iprot.readI32());
      struct.setEnvIsSet(true);
      struct.sound = iprot.readString();
      struct.setSoundIsSet(true);
      struct.alert = iprot.readString();
      struct.setAlertIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.uid = iprot.readString();
        struct.setUidIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set45 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tags = new java.util.HashSet<String>(2*_set45.size);
          String _elem46;
          for (int _i47 = 0; _i47 < _set45.size; ++_i47)
          {
            _elem46 = iprot.readString();
            struct.tags.add(_elem46);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.category = iprot.readString();
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(4)) {
        struct.action = iprot.readString();
        struct.setActionIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map48 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.ext = new java.util.HashMap<String,String>(2*_map48.size);
          String _key49;
          String _val50;
          for (int _i51 = 0; _i51 < _map48.size; ++_i51)
          {
            _key49 = iprot.readString();
            _val50 = iprot.readString();
            struct.ext.put(_key49, _val50);
          }
        }
        struct.setExtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.storaged = iprot.readString();
        struct.setStoragedIsSet(true);
      }
      if (incoming.get(7)) {
        struct.badge = iprot.readI32();
        struct.setBadgeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.eventTime = iprot.readI32();
        struct.setEventTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

