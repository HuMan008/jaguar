<?php
namespace com\iusworks\jaguar;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class DeviceType {
  const iOS = 1;
  const Android = 2;
  static public $__names = array(
    1 => 'iOS',
    2 => 'Android',
  );
}

final class Environment {
  const Dev = 1;
  const Prod = 2;
  static public $__names = array(
    1 => 'Dev',
    2 => 'Prod',
  );
}

class DevicePlatformVoucher {
  static $_TSPEC;

  /**
   * @var string
   */
  public $platform = null;
  /**
   * @var string
   */
  public $voucher = null;
  /**
   * @var int
   */
  public $state = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'platform',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'voucher',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'state',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['voucher'])) {
        $this->voucher = $vals['voucher'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
    }
  }

  public function getName() {
    return 'DevicePlatformVoucher';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->voucher);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DevicePlatformVoucher');
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::STRING, 1);
      $xfer += $output->writeString($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucher !== null) {
      $xfer += $output->writeFieldBegin('voucher', TType::STRING, 2);
      $xfer += $output->writeString($this->voucher);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I16, 3);
      $xfer += $output->writeI16($this->state);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Device {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var string
   */
  public $uid = null;
  /**
   * @var string
   */
  public $voucher = null;
  /**
   * @var string[]
   */
  public $tags = null;
  /**
   * @var string[]
   */
  public $cares = null;
  /**
   * @var int
   */
  public $state = null;
  /**
   * @var string
   */
  public $deviceId = null;
  /**
   * @var \com\iusworks\jaguar\DevicePlatformVoucher[]
   */
  public $dpv = null;
  /**
   * @var array
   */
  public $deviceInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'voucher',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'tags',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'cares',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'state',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'deviceId',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'dpv',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\com\iusworks\jaguar\DevicePlatformVoucher',
            ),
          ),
        9 => array(
          'var' => 'deviceInfo',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['voucher'])) {
        $this->voucher = $vals['voucher'];
      }
      if (isset($vals['tags'])) {
        $this->tags = $vals['tags'];
      }
      if (isset($vals['cares'])) {
        $this->cares = $vals['cares'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['deviceId'])) {
        $this->deviceId = $vals['deviceId'];
      }
      if (isset($vals['dpv'])) {
        $this->dpv = $vals['dpv'];
      }
      if (isset($vals['deviceInfo'])) {
        $this->deviceInfo = $vals['deviceInfo'];
      }
    }
  }

  public function getName() {
    return 'Device';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->voucher);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::SET) {
            $this->tags = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readSetBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              if (is_scalar($elem5)) {
                $this->tags[$elem5] = true;
              } else {
                $this->tags []= $elem5;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::SET) {
            $this->cares = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readSetBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readString($elem11);
              if (is_scalar($elem11)) {
                $this->cares[$elem11] = true;
              } else {
                $this->cares []= $elem11;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deviceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::SET) {
            $this->dpv = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readSetBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $elem17 = new \com\iusworks\jaguar\DevicePlatformVoucher();
              $xfer += $elem17->read($input);
              if (is_scalar($elem17)) {
                $this->dpv[$elem17] = true;
              } else {
                $this->dpv []= $elem17;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::MAP) {
            $this->deviceInfo = array();
            $_size18 = 0;
            $_ktype19 = 0;
            $_vtype20 = 0;
            $xfer += $input->readMapBegin($_ktype19, $_vtype20, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $key23 = '';
              $val24 = '';
              $xfer += $input->readString($key23);
              $xfer += $input->readString($val24);
              $this->deviceInfo[$key23] = $val24;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Device');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 2);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucher !== null) {
      $xfer += $output->writeFieldBegin('voucher', TType::STRING, 3);
      $xfer += $output->writeString($this->voucher);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tags !== null) {
      if (!is_array($this->tags)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tags', TType::SET, 4);
      {
        $output->writeSetBegin(TType::STRING, count($this->tags));
        {
          foreach ($this->tags as $iter25 => $iter26)
          {
            if (is_scalar($iter26)) {
            $xfer += $output->writeString($iter25);
            } else {
            $xfer += $output->writeString($iter26);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cares !== null) {
      if (!is_array($this->cares)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cares', TType::SET, 5);
      {
        $output->writeSetBegin(TType::STRING, count($this->cares));
        {
          foreach ($this->cares as $iter27 => $iter28)
          {
            if (is_scalar($iter28)) {
            $xfer += $output->writeString($iter27);
            } else {
            $xfer += $output->writeString($iter28);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I16, 6);
      $xfer += $output->writeI16($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceId !== null) {
      $xfer += $output->writeFieldBegin('deviceId', TType::STRING, 7);
      $xfer += $output->writeString($this->deviceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dpv !== null) {
      if (!is_array($this->dpv)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('dpv', TType::SET, 8);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->dpv));
        {
          foreach ($this->dpv as $iter29 => $iter30)
          {
            if (is_scalar($iter30)) {
            $xfer += $iter29->write($output);
            } else {
            $xfer += $iter30->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceInfo !== null) {
      if (!is_array($this->deviceInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deviceInfo', TType::MAP, 9);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->deviceInfo));
        {
          foreach ($this->deviceInfo as $kiter31 => $viter32)
          {
            $xfer += $output->writeString($kiter31);
            $xfer += $output->writeString($viter32);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Notification {
  static $_TSPEC;

  /**
   * @var int
   */
  public $env = null;
  /**
   * @var string
   */
  public $uid = null;
  /**
   * @var string[]
   */
  public $tags = null;
  /**
   * @var string
   */
  public $sound = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $category = null;
  /**
   * @var string
   */
  public $action = null;
  /**
   * @var array
   */
  public $ext = null;
  /**
   * @var string
   */
  public $storaged = null;
  /**
   * @var int
   */
  public $badge = null;
  /**
   * @var int
   */
  public $eventTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'env',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tags',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'sound',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'category',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'action',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'ext',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        10 => array(
          'var' => 'storaged',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'badge',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'eventTime',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['env'])) {
        $this->env = $vals['env'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['tags'])) {
        $this->tags = $vals['tags'];
      }
      if (isset($vals['sound'])) {
        $this->sound = $vals['sound'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
      if (isset($vals['ext'])) {
        $this->ext = $vals['ext'];
      }
      if (isset($vals['storaged'])) {
        $this->storaged = $vals['storaged'];
      }
      if (isset($vals['badge'])) {
        $this->badge = $vals['badge'];
      }
      if (isset($vals['eventTime'])) {
        $this->eventTime = $vals['eventTime'];
      }
    }
  }

  public function getName() {
    return 'Notification';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->env);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::SET) {
            $this->tags = array();
            $_size33 = 0;
            $_etype36 = 0;
            $xfer += $input->readSetBegin($_etype36, $_size33);
            for ($_i37 = 0; $_i37 < $_size33; ++$_i37)
            {
              $elem38 = null;
              $xfer += $input->readString($elem38);
              if (is_scalar($elem38)) {
                $this->tags[$elem38] = true;
              } else {
                $this->tags []= $elem38;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sound);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::MAP) {
            $this->ext = array();
            $_size39 = 0;
            $_ktype40 = 0;
            $_vtype41 = 0;
            $xfer += $input->readMapBegin($_ktype40, $_vtype41, $_size39);
            for ($_i43 = 0; $_i43 < $_size39; ++$_i43)
            {
              $key44 = '';
              $val45 = '';
              $xfer += $input->readString($key44);
              $xfer += $input->readString($val45);
              $this->ext[$key44] = $val45;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->storaged);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->badge);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->eventTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Notification');
    if ($this->env !== null) {
      $xfer += $output->writeFieldBegin('env', TType::I32, 1);
      $xfer += $output->writeI32($this->env);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 2);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tags !== null) {
      if (!is_array($this->tags)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tags', TType::SET, 3);
      {
        $output->writeSetBegin(TType::STRING, count($this->tags));
        {
          foreach ($this->tags as $iter46 => $iter47)
          {
            if (is_scalar($iter47)) {
            $xfer += $output->writeString($iter46);
            } else {
            $xfer += $output->writeString($iter47);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sound !== null) {
      $xfer += $output->writeFieldBegin('sound', TType::STRING, 4);
      $xfer += $output->writeString($this->sound);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 5);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 6);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', TType::STRING, 7);
      $xfer += $output->writeString($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action !== null) {
      $xfer += $output->writeFieldBegin('action', TType::STRING, 8);
      $xfer += $output->writeString($this->action);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ext !== null) {
      if (!is_array($this->ext)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ext', TType::MAP, 9);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->ext));
        {
          foreach ($this->ext as $kiter48 => $viter49)
          {
            $xfer += $output->writeString($kiter48);
            $xfer += $output->writeString($viter49);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->storaged !== null) {
      $xfer += $output->writeFieldBegin('storaged', TType::STRING, 10);
      $xfer += $output->writeString($this->storaged);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->badge !== null) {
      $xfer += $output->writeFieldBegin('badge', TType::I32, 11);
      $xfer += $output->writeI32($this->badge);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventTime !== null) {
      $xfer += $output->writeFieldBegin('eventTime', TType::I32, 12);
      $xfer += $output->writeI32($this->eventTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NotificationReport {
  static $_TSPEC;

  /**
   * @var string
   */
  public $notificationId = null;
  /**
   * @var int
   */
  public $recvTime = null;
  /**
   * @var string
   */
  public $channel = null;
  /**
   * @var string
   */
  public $deviceName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'notificationId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'recvTime',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'channel',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'deviceName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['notificationId'])) {
        $this->notificationId = $vals['notificationId'];
      }
      if (isset($vals['recvTime'])) {
        $this->recvTime = $vals['recvTime'];
      }
      if (isset($vals['channel'])) {
        $this->channel = $vals['channel'];
      }
      if (isset($vals['deviceName'])) {
        $this->deviceName = $vals['deviceName'];
      }
    }
  }

  public function getName() {
    return 'NotificationReport';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->notificationId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->recvTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deviceName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NotificationReport');
    if ($this->notificationId !== null) {
      $xfer += $output->writeFieldBegin('notificationId', TType::STRING, 1);
      $xfer += $output->writeString($this->notificationId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recvTime !== null) {
      $xfer += $output->writeFieldBegin('recvTime', TType::I32, 2);
      $xfer += $output->writeI32($this->recvTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel !== null) {
      $xfer += $output->writeFieldBegin('channel', TType::STRING, 3);
      $xfer += $output->writeString($this->channel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceName !== null) {
      $xfer += $output->writeFieldBegin('deviceName', TType::STRING, 4);
      $xfer += $output->writeString($this->deviceName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeviceRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $systemId = null;
  /**
   * @var int
   */
  public $time = null;
  /**
   * @var string
   */
  public $signature = null;
  /**
   * @var \com\iusworks\jaguar\Device
   */
  public $device = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'systemId',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'time',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'signature',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'device',
          'type' => TType::STRUCT,
          'class' => '\com\iusworks\jaguar\Device',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['systemId'])) {
        $this->systemId = $vals['systemId'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['signature'])) {
        $this->signature = $vals['signature'];
      }
      if (isset($vals['device'])) {
        $this->device = $vals['device'];
      }
    }
  }

  public function getName() {
    return 'DeviceRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->systemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->signature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->device = new \com\iusworks\jaguar\Device();
            $xfer += $this->device->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeviceRequest');
    if ($this->systemId !== null) {
      $xfer += $output->writeFieldBegin('systemId', TType::I16, 1);
      $xfer += $output->writeI16($this->systemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::I32, 2);
      $xfer += $output->writeI32($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signature !== null) {
      $xfer += $output->writeFieldBegin('signature', TType::STRING, 3);
      $xfer += $output->writeString($this->signature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->device !== null) {
      if (!is_object($this->device)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('device', TType::STRUCT, 4);
      $xfer += $this->device->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NotificationRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $systemId = null;
  /**
   * @var int
   */
  public $time = null;
  /**
   * @var string
   */
  public $signature = null;
  /**
   * @var \com\iusworks\jaguar\Notification
   */
  public $notification = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'systemId',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'time',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'signature',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'notification',
          'type' => TType::STRUCT,
          'class' => '\com\iusworks\jaguar\Notification',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['systemId'])) {
        $this->systemId = $vals['systemId'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['signature'])) {
        $this->signature = $vals['signature'];
      }
      if (isset($vals['notification'])) {
        $this->notification = $vals['notification'];
      }
    }
  }

  public function getName() {
    return 'NotificationRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->systemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->signature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->notification = new \com\iusworks\jaguar\Notification();
            $xfer += $this->notification->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NotificationRequest');
    if ($this->systemId !== null) {
      $xfer += $output->writeFieldBegin('systemId', TType::I16, 1);
      $xfer += $output->writeI16($this->systemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::I32, 2);
      $xfer += $output->writeI32($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signature !== null) {
      $xfer += $output->writeFieldBegin('signature', TType::STRING, 3);
      $xfer += $output->writeString($this->signature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notification !== null) {
      if (!is_object($this->notification)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notification', TType::STRUCT, 4);
      $xfer += $this->notification->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryNotificationRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $systemId = null;
  /**
   * @var int
   */
  public $time = null;
  /**
   * @var string
   */
  public $signature = null;
  /**
   * @var string
   */
  public $uid = null;
  /**
   * @var int
   */
  public $start = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'systemId',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'time',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'signature',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'start',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['systemId'])) {
        $this->systemId = $vals['systemId'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['signature'])) {
        $this->signature = $vals['signature'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
    }
  }

  public function getName() {
    return 'QueryNotificationRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->systemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->signature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryNotificationRequest');
    if ($this->systemId !== null) {
      $xfer += $output->writeFieldBegin('systemId', TType::I16, 1);
      $xfer += $output->writeI16($this->systemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::I32, 2);
      $xfer += $output->writeI32($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signature !== null) {
      $xfer += $output->writeFieldBegin('signature', TType::STRING, 3);
      $xfer += $output->writeString($this->signature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 4);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I32, 5);
      $xfer += $output->writeI32($this->start);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NotificationReportRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $systemId = null;
  /**
   * @var int
   */
  public $time = null;
  /**
   * @var string
   */
  public $signature = null;
  /**
   * @var \com\iusworks\jaguar\NotificationReport
   */
  public $report = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'systemId',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'time',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'signature',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'report',
          'type' => TType::STRUCT,
          'class' => '\com\iusworks\jaguar\NotificationReport',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['systemId'])) {
        $this->systemId = $vals['systemId'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['signature'])) {
        $this->signature = $vals['signature'];
      }
      if (isset($vals['report'])) {
        $this->report = $vals['report'];
      }
    }
  }

  public function getName() {
    return 'NotificationReportRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->systemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->signature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->report = new \com\iusworks\jaguar\NotificationReport();
            $xfer += $this->report->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NotificationReportRequest');
    if ($this->systemId !== null) {
      $xfer += $output->writeFieldBegin('systemId', TType::I16, 1);
      $xfer += $output->writeI16($this->systemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::I32, 2);
      $xfer += $output->writeI32($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signature !== null) {
      $xfer += $output->writeFieldBegin('signature', TType::STRING, 3);
      $xfer += $output->writeString($this->signature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->report !== null) {
      if (!is_object($this->report)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('report', TType::STRUCT, 4);
      $xfer += $this->report->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NotificationHistory {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mid = null;
  /**
   * @var string
   */
  public $uid = null;
  /**
   * @var int
   */
  public $datetime = null;
  /**
   * @var string
   */
  public $action = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $storaged = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'datetime',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'action',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'storaged',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['datetime'])) {
        $this->datetime = $vals['datetime'];
      }
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['storaged'])) {
        $this->storaged = $vals['storaged'];
      }
    }
  }

  public function getName() {
    return 'NotificationHistory';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->datetime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->storaged);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NotificationHistory');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 2);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->datetime !== null) {
      $xfer += $output->writeFieldBegin('datetime', TType::I32, 3);
      $xfer += $output->writeI32($this->datetime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action !== null) {
      $xfer += $output->writeFieldBegin('action', TType::STRING, 4);
      $xfer += $output->writeString($this->action);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 5);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 6);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->storaged !== null) {
      $xfer += $output->writeFieldBegin('storaged', TType::STRING, 7);
      $xfer += $output->writeString($this->storaged);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JaguarException extends TException {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'JaguarException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JaguarException');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


