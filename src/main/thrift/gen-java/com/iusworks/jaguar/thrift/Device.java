/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.iusworks.jaguar.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-16")
public class Device implements org.apache.thrift.TBase<Device, Device._Fields>, java.io.Serializable, Cloneable, Comparable<Device> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Device");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VOUCHER_FIELD_DESC = new org.apache.thrift.protocol.TField("voucher", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField CARES_FIELD_DESC = new org.apache.thrift.protocol.TField("cares", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DPV_FIELD_DESC = new org.apache.thrift.protocol.TField("dpv", org.apache.thrift.protocol.TType.SET, (short)8);
  private static final org.apache.thrift.protocol.TField DEVICE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceInfo", org.apache.thrift.protocol.TType.MAP, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DeviceStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DeviceTupleSchemeFactory();

  /**
   * 
   * @see DeviceType
   */
  public DeviceType type; // required
  public java.lang.String uid; // required
  public java.lang.String voucher; // required
  public java.util.Set<java.lang.String> tags; // optional
  public java.util.Set<java.lang.String> cares; // optional
  public short state; // required
  public java.lang.String deviceId; // optional
  public java.util.Set<DevicePlatformVoucher> dpv; // optional
  public java.util.Map<java.lang.String,java.lang.String> deviceInfo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see DeviceType
     */
    TYPE((short)1, "type"),
    UID((short)2, "uid"),
    VOUCHER((short)3, "voucher"),
    TAGS((short)4, "tags"),
    CARES((short)5, "cares"),
    STATE((short)6, "state"),
    DEVICE_ID((short)7, "deviceId"),
    DPV((short)8, "dpv"),
    DEVICE_INFO((short)9, "deviceInfo");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // UID
          return UID;
        case 3: // VOUCHER
          return VOUCHER;
        case 4: // TAGS
          return TAGS;
        case 5: // CARES
          return CARES;
        case 6: // STATE
          return STATE;
        case 7: // DEVICE_ID
          return DEVICE_ID;
        case 8: // DPV
          return DPV;
        case 9: // DEVICE_INFO
          return DEVICE_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TAGS,_Fields.CARES,_Fields.DEVICE_ID,_Fields.DPV,_Fields.DEVICE_INFO};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DeviceType.class)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VOUCHER, new org.apache.thrift.meta_data.FieldMetaData("voucher", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CARES, new org.apache.thrift.meta_data.FieldMetaData("cares", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DPV, new org.apache.thrift.meta_data.FieldMetaData("dpv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DevicePlatformVoucher.class))));
    tmpMap.put(_Fields.DEVICE_INFO, new org.apache.thrift.meta_data.FieldMetaData("deviceInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Device.class, metaDataMap);
  }

  public Device() {
  }

  public Device(
    DeviceType type,
    java.lang.String uid,
    java.lang.String voucher,
    short state)
  {
    this();
    this.type = type;
    this.uid = uid;
    this.voucher = voucher;
    this.state = state;
    setStateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Device(Device other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetVoucher()) {
      this.voucher = other.voucher;
    }
    if (other.isSetTags()) {
      java.util.Set<java.lang.String> __this__tags = new java.util.HashSet<java.lang.String>(other.tags);
      this.tags = __this__tags;
    }
    if (other.isSetCares()) {
      java.util.Set<java.lang.String> __this__cares = new java.util.HashSet<java.lang.String>(other.cares);
      this.cares = __this__cares;
    }
    this.state = other.state;
    if (other.isSetDeviceId()) {
      this.deviceId = other.deviceId;
    }
    if (other.isSetDpv()) {
      java.util.Set<DevicePlatformVoucher> __this__dpv = new java.util.HashSet<DevicePlatformVoucher>(other.dpv.size());
      for (DevicePlatformVoucher other_element : other.dpv) {
        __this__dpv.add(new DevicePlatformVoucher(other_element));
      }
      this.dpv = __this__dpv;
    }
    if (other.isSetDeviceInfo()) {
      java.util.Map<java.lang.String,java.lang.String> __this__deviceInfo = new java.util.HashMap<java.lang.String,java.lang.String>(other.deviceInfo);
      this.deviceInfo = __this__deviceInfo;
    }
  }

  public Device deepCopy() {
    return new Device(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.uid = null;
    this.voucher = null;
    this.tags = null;
    this.cares = null;
    setStateIsSet(false);
    this.state = 0;
    this.deviceId = null;
    this.dpv = null;
    this.deviceInfo = null;
  }

  /**
   * 
   * @see DeviceType
   */
  public DeviceType getType() {
    return this.type;
  }

  /**
   * 
   * @see DeviceType
   */
  public Device setType(DeviceType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public java.lang.String getUid() {
    return this.uid;
  }

  public Device setUid(java.lang.String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public java.lang.String getVoucher() {
    return this.voucher;
  }

  public Device setVoucher(java.lang.String voucher) {
    this.voucher = voucher;
    return this;
  }

  public void unsetVoucher() {
    this.voucher = null;
  }

  /** Returns true if field voucher is set (has been assigned a value) and false otherwise */
  public boolean isSetVoucher() {
    return this.voucher != null;
  }

  public void setVoucherIsSet(boolean value) {
    if (!value) {
      this.voucher = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<java.lang.String> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(java.lang.String elem) {
    if (this.tags == null) {
      this.tags = new java.util.HashSet<java.lang.String>();
    }
    this.tags.add(elem);
  }

  public java.util.Set<java.lang.String> getTags() {
    return this.tags;
  }

  public Device setTags(java.util.Set<java.lang.String> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public int getCaresSize() {
    return (this.cares == null) ? 0 : this.cares.size();
  }

  public java.util.Iterator<java.lang.String> getCaresIterator() {
    return (this.cares == null) ? null : this.cares.iterator();
  }

  public void addToCares(java.lang.String elem) {
    if (this.cares == null) {
      this.cares = new java.util.HashSet<java.lang.String>();
    }
    this.cares.add(elem);
  }

  public java.util.Set<java.lang.String> getCares() {
    return this.cares;
  }

  public Device setCares(java.util.Set<java.lang.String> cares) {
    this.cares = cares;
    return this;
  }

  public void unsetCares() {
    this.cares = null;
  }

  /** Returns true if field cares is set (has been assigned a value) and false otherwise */
  public boolean isSetCares() {
    return this.cares != null;
  }

  public void setCaresIsSet(boolean value) {
    if (!value) {
      this.cares = null;
    }
  }

  public short getState() {
    return this.state;
  }

  public Device setState(short state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public java.lang.String getDeviceId() {
    return this.deviceId;
  }

  public Device setDeviceId(java.lang.String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  public void unsetDeviceId() {
    this.deviceId = null;
  }

  /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceId() {
    return this.deviceId != null;
  }

  public void setDeviceIdIsSet(boolean value) {
    if (!value) {
      this.deviceId = null;
    }
  }

  public int getDpvSize() {
    return (this.dpv == null) ? 0 : this.dpv.size();
  }

  public java.util.Iterator<DevicePlatformVoucher> getDpvIterator() {
    return (this.dpv == null) ? null : this.dpv.iterator();
  }

  public void addToDpv(DevicePlatformVoucher elem) {
    if (this.dpv == null) {
      this.dpv = new java.util.HashSet<DevicePlatformVoucher>();
    }
    this.dpv.add(elem);
  }

  public java.util.Set<DevicePlatformVoucher> getDpv() {
    return this.dpv;
  }

  public Device setDpv(java.util.Set<DevicePlatformVoucher> dpv) {
    this.dpv = dpv;
    return this;
  }

  public void unsetDpv() {
    this.dpv = null;
  }

  /** Returns true if field dpv is set (has been assigned a value) and false otherwise */
  public boolean isSetDpv() {
    return this.dpv != null;
  }

  public void setDpvIsSet(boolean value) {
    if (!value) {
      this.dpv = null;
    }
  }

  public int getDeviceInfoSize() {
    return (this.deviceInfo == null) ? 0 : this.deviceInfo.size();
  }

  public void putToDeviceInfo(java.lang.String key, java.lang.String val) {
    if (this.deviceInfo == null) {
      this.deviceInfo = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.deviceInfo.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.String> getDeviceInfo() {
    return this.deviceInfo;
  }

  public Device setDeviceInfo(java.util.Map<java.lang.String,java.lang.String> deviceInfo) {
    this.deviceInfo = deviceInfo;
    return this;
  }

  public void unsetDeviceInfo() {
    this.deviceInfo = null;
  }

  /** Returns true if field deviceInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceInfo() {
    return this.deviceInfo != null;
  }

  public void setDeviceInfoIsSet(boolean value) {
    if (!value) {
      this.deviceInfo = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((DeviceType)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((java.lang.String)value);
      }
      break;

    case VOUCHER:
      if (value == null) {
        unsetVoucher();
      } else {
        setVoucher((java.lang.String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((java.util.Set<java.lang.String>)value);
      }
      break;

    case CARES:
      if (value == null) {
        unsetCares();
      } else {
        setCares((java.util.Set<java.lang.String>)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((java.lang.Short)value);
      }
      break;

    case DEVICE_ID:
      if (value == null) {
        unsetDeviceId();
      } else {
        setDeviceId((java.lang.String)value);
      }
      break;

    case DPV:
      if (value == null) {
        unsetDpv();
      } else {
        setDpv((java.util.Set<DevicePlatformVoucher>)value);
      }
      break;

    case DEVICE_INFO:
      if (value == null) {
        unsetDeviceInfo();
      } else {
        setDeviceInfo((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case UID:
      return getUid();

    case VOUCHER:
      return getVoucher();

    case TAGS:
      return getTags();

    case CARES:
      return getCares();

    case STATE:
      return getState();

    case DEVICE_ID:
      return getDeviceId();

    case DPV:
      return getDpv();

    case DEVICE_INFO:
      return getDeviceInfo();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case UID:
      return isSetUid();
    case VOUCHER:
      return isSetVoucher();
    case TAGS:
      return isSetTags();
    case CARES:
      return isSetCares();
    case STATE:
      return isSetState();
    case DEVICE_ID:
      return isSetDeviceId();
    case DPV:
      return isSetDpv();
    case DEVICE_INFO:
      return isSetDeviceInfo();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Device)
      return this.equals((Device)that);
    return false;
  }

  public boolean equals(Device that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_voucher = true && this.isSetVoucher();
    boolean that_present_voucher = true && that.isSetVoucher();
    if (this_present_voucher || that_present_voucher) {
      if (!(this_present_voucher && that_present_voucher))
        return false;
      if (!this.voucher.equals(that.voucher))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_cares = true && this.isSetCares();
    boolean that_present_cares = true && that.isSetCares();
    if (this_present_cares || that_present_cares) {
      if (!(this_present_cares && that_present_cares))
        return false;
      if (!this.cares.equals(that.cares))
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_deviceId = true && this.isSetDeviceId();
    boolean that_present_deviceId = true && that.isSetDeviceId();
    if (this_present_deviceId || that_present_deviceId) {
      if (!(this_present_deviceId && that_present_deviceId))
        return false;
      if (!this.deviceId.equals(that.deviceId))
        return false;
    }

    boolean this_present_dpv = true && this.isSetDpv();
    boolean that_present_dpv = true && that.isSetDpv();
    if (this_present_dpv || that_present_dpv) {
      if (!(this_present_dpv && that_present_dpv))
        return false;
      if (!this.dpv.equals(that.dpv))
        return false;
    }

    boolean this_present_deviceInfo = true && this.isSetDeviceInfo();
    boolean that_present_deviceInfo = true && that.isSetDeviceInfo();
    if (this_present_deviceInfo || that_present_deviceInfo) {
      if (!(this_present_deviceInfo && that_present_deviceInfo))
        return false;
      if (!this.deviceInfo.equals(that.deviceInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
    if (isSetUid())
      hashCode = hashCode * 8191 + uid.hashCode();

    hashCode = hashCode * 8191 + ((isSetVoucher()) ? 131071 : 524287);
    if (isSetVoucher())
      hashCode = hashCode * 8191 + voucher.hashCode();

    hashCode = hashCode * 8191 + ((isSetTags()) ? 131071 : 524287);
    if (isSetTags())
      hashCode = hashCode * 8191 + tags.hashCode();

    hashCode = hashCode * 8191 + ((isSetCares()) ? 131071 : 524287);
    if (isSetCares())
      hashCode = hashCode * 8191 + cares.hashCode();

    hashCode = hashCode * 8191 + state;

    hashCode = hashCode * 8191 + ((isSetDeviceId()) ? 131071 : 524287);
    if (isSetDeviceId())
      hashCode = hashCode * 8191 + deviceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetDpv()) ? 131071 : 524287);
    if (isSetDpv())
      hashCode = hashCode * 8191 + dpv.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeviceInfo()) ? 131071 : 524287);
    if (isSetDeviceInfo())
      hashCode = hashCode * 8191 + deviceInfo.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Device other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVoucher()).compareTo(other.isSetVoucher());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVoucher()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.voucher, other.voucher);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCares()).compareTo(other.isSetCares());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCares()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cares, other.cares);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeviceId()).compareTo(other.isSetDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, other.deviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDpv()).compareTo(other.isSetDpv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDpv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dpv, other.dpv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeviceInfo()).compareTo(other.isSetDeviceInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceInfo, other.deviceInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Device(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("voucher:");
    if (this.voucher == null) {
      sb.append("null");
    } else {
      sb.append(this.voucher);
    }
    first = false;
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (isSetCares()) {
      if (!first) sb.append(", ");
      sb.append("cares:");
      if (this.cares == null) {
        sb.append("null");
      } else {
        sb.append(this.cares);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (isSetDeviceId()) {
      if (!first) sb.append(", ");
      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
    }
    if (isSetDpv()) {
      if (!first) sb.append(", ");
      sb.append("dpv:");
      if (this.dpv == null) {
        sb.append("null");
      } else {
        sb.append(this.dpv);
      }
      first = false;
    }
    if (isSetDeviceInfo()) {
      if (!first) sb.append(", ");
      sb.append("deviceInfo:");
      if (this.deviceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceInfo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    if (uid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uid' was not present! Struct: " + toString());
    }
    if (voucher == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'voucher' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'state' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DeviceStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DeviceStandardScheme getScheme() {
      return new DeviceStandardScheme();
    }
  }

  private static class DeviceStandardScheme extends org.apache.thrift.scheme.StandardScheme<Device> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Device struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.iusworks.jaguar.thrift.DeviceType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VOUCHER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.voucher = iprot.readString();
              struct.setVoucherIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.tags = new java.util.HashSet<java.lang.String>(2*_set0.size);
                java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.tags.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CARES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.cares = new java.util.HashSet<java.lang.String>(2*_set3.size);
                java.lang.String _elem4;
                for (int _i5 = 0; _i5 < _set3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.cares.add(_elem4);
                }
                iprot.readSetEnd();
              }
              struct.setCaresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.state = iprot.readI16();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceId = iprot.readString();
              struct.setDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DPV
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set6 = iprot.readSetBegin();
                struct.dpv = new java.util.HashSet<DevicePlatformVoucher>(2*_set6.size);
                DevicePlatformVoucher _elem7;
                for (int _i8 = 0; _i8 < _set6.size; ++_i8)
                {
                  _elem7 = new DevicePlatformVoucher();
                  _elem7.read(iprot);
                  struct.dpv.add(_elem7);
                }
                iprot.readSetEnd();
              }
              struct.setDpvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEVICE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map9 = iprot.readMapBegin();
                struct.deviceInfo = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map9.size);
                java.lang.String _key10;
                java.lang.String _val11;
                for (int _i12 = 0; _i12 < _map9.size; ++_i12)
                {
                  _key10 = iprot.readString();
                  _val11 = iprot.readString();
                  struct.deviceInfo.put(_key10, _val11);
                }
                iprot.readMapEnd();
              }
              struct.setDeviceInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetState()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'state' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Device struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.voucher != null) {
        oprot.writeFieldBegin(VOUCHER_FIELD_DESC);
        oprot.writeString(struct.voucher);
        oprot.writeFieldEnd();
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
            for (java.lang.String _iter13 : struct.tags)
            {
              oprot.writeString(_iter13);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.cares != null) {
        if (struct.isSetCares()) {
          oprot.writeFieldBegin(CARES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.cares.size()));
            for (java.lang.String _iter14 : struct.cares)
            {
              oprot.writeString(_iter14);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI16(struct.state);
      oprot.writeFieldEnd();
      if (struct.deviceId != null) {
        if (struct.isSetDeviceId()) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dpv != null) {
        if (struct.isSetDpv()) {
          oprot.writeFieldBegin(DPV_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.dpv.size()));
            for (DevicePlatformVoucher _iter15 : struct.dpv)
            {
              _iter15.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.deviceInfo != null) {
        if (struct.isSetDeviceInfo()) {
          oprot.writeFieldBegin(DEVICE_INFO_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.deviceInfo.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter16 : struct.deviceInfo.entrySet())
            {
              oprot.writeString(_iter16.getKey());
              oprot.writeString(_iter16.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DeviceTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DeviceTupleScheme getScheme() {
      return new DeviceTupleScheme();
    }
  }

  private static class DeviceTupleScheme extends org.apache.thrift.scheme.TupleScheme<Device> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Device struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.type.getValue());
      oprot.writeString(struct.uid);
      oprot.writeString(struct.voucher);
      oprot.writeI16(struct.state);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTags()) {
        optionals.set(0);
      }
      if (struct.isSetCares()) {
        optionals.set(1);
      }
      if (struct.isSetDeviceId()) {
        optionals.set(2);
      }
      if (struct.isSetDpv()) {
        optionals.set(3);
      }
      if (struct.isSetDeviceInfo()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (java.lang.String _iter17 : struct.tags)
          {
            oprot.writeString(_iter17);
          }
        }
      }
      if (struct.isSetCares()) {
        {
          oprot.writeI32(struct.cares.size());
          for (java.lang.String _iter18 : struct.cares)
          {
            oprot.writeString(_iter18);
          }
        }
      }
      if (struct.isSetDeviceId()) {
        oprot.writeString(struct.deviceId);
      }
      if (struct.isSetDpv()) {
        {
          oprot.writeI32(struct.dpv.size());
          for (DevicePlatformVoucher _iter19 : struct.dpv)
          {
            _iter19.write(oprot);
          }
        }
      }
      if (struct.isSetDeviceInfo()) {
        {
          oprot.writeI32(struct.deviceInfo.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter20 : struct.deviceInfo.entrySet())
          {
            oprot.writeString(_iter20.getKey());
            oprot.writeString(_iter20.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Device struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.type = com.iusworks.jaguar.thrift.DeviceType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      struct.uid = iprot.readString();
      struct.setUidIsSet(true);
      struct.voucher = iprot.readString();
      struct.setVoucherIsSet(true);
      struct.state = iprot.readI16();
      struct.setStateIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set21 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tags = new java.util.HashSet<java.lang.String>(2*_set21.size);
          java.lang.String _elem22;
          for (int _i23 = 0; _i23 < _set21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.tags.add(_elem22);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set24 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.cares = new java.util.HashSet<java.lang.String>(2*_set24.size);
          java.lang.String _elem25;
          for (int _i26 = 0; _i26 < _set24.size; ++_i26)
          {
            _elem25 = iprot.readString();
            struct.cares.add(_elem25);
          }
        }
        struct.setCaresIsSet(true);
      }
      if (incoming.get(2)) {
        struct.deviceId = iprot.readString();
        struct.setDeviceIdIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set27 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dpv = new java.util.HashSet<DevicePlatformVoucher>(2*_set27.size);
          DevicePlatformVoucher _elem28;
          for (int _i29 = 0; _i29 < _set27.size; ++_i29)
          {
            _elem28 = new DevicePlatformVoucher();
            _elem28.read(iprot);
            struct.dpv.add(_elem28);
          }
        }
        struct.setDpvIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map30 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.deviceInfo = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map30.size);
          java.lang.String _key31;
          java.lang.String _val32;
          for (int _i33 = 0; _i33 < _map30.size; ++_i33)
          {
            _key31 = iprot.readString();
            _val32 = iprot.readString();
            struct.deviceInfo.put(_key31, _val32);
          }
        }
        struct.setDeviceInfoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

